@page "/"
@inject WeatherService WeatherService
@inject GeoCodingService GeoCodingService
@using BuccaneersWeatherWatch.Web.Components
@using BuccaneersWeatherWatch.Web.Models;
@using BuccaneersWeatherWatch.Web.Services;
@using BuccaneersWeatherWatch.Web.Shared
@using BuccaneersWeatherWatch.Web.Utils;

<PageTitle>Home</PageTitle>



<MudGrid>
    <MudItem xs="12">
        <MudPaper Elevation="5" Class="pa-4">
            <EditForm Model="@_search" OnSubmit="SearchForWeatherForcast">
                <MudGrid>
                    <MudItem xs="10">
                        <MudTextField Variant="Variant.Filled" AutoFocus="true" Label="Search Location" @bind-Value="_search.Text" For="(() => _search.Text)" />
                    </MudItem>
                    <MudItem xs="2" Class="d-flex align-center">
                        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Search</MudButton>
                    </MudItem>

                    @if (_isLoading)
                    {
                        <MudItem xs="12">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="50px" />
                        </MudItem>
                    }

                    @if (_geoCodingData != null && _geoCodingData.Count > 0 && !_isLoading && !_isNoResults)
                    {
                        <MudItem xs="12">
                            <MudSelect Variant="Variant.Filled" T="GeoCodingLocationData" Label="Currently Selected" Immediate="true" Value="_selectedGeoCodingLocation" ValueChanged="ChangeSelected">
                                @foreach (GeoCodingLocationData location in _geoCodingData)
                                {
                                    <MudSelectItem Value="@location" T="GeoCodingLocationData">@location.Display_name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }

                </MudGrid>
            </EditForm>
        </MudPaper>
    </MudItem>

    

    @if (_isLoading)
    {
        <MudItem xs="12">
            <MudPaper Elevation="5">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="300px" />
            </MudPaper>          
        </MudItem>

        <MudItem xs="12">
            <MudPaper Elevation="5">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="600px" />
            </MudPaper>
        </MudItem>
    }

    @if (_isNoResults)
    {
        <MudItem xs="12">
            <MudText>Could not find any results with that location. Modify the search and try again.</MudText>
        </MudItem>
    }

    

    @if (_weatherData != null && !_isLoading)
    {
        <CurrentComponent WeatherData="@_weatherData" />
        <TemperatureDailyChart DailyData="_weatherData.Daily.Data" />
    }

</MudGrid>

@code {
    private Search _search = new Search();
    private WeatherData? _weatherData;
    private List<GeoCodingLocationData>? _geoCodingData;
    private GeoCodingLocationData? _selectedGeoCodingLocation;
    private bool _isNoResults = false;
    private bool _isLoading = false;

    private async Task ChangeSelected(GeoCodingLocationData newValue)
    {
        _isLoading = true;
        _selectedGeoCodingLocation = newValue;

        await LoadWeatherData();
    }

    public async Task SearchForWeatherForcast()
    {
        _isLoading = true;

        if (string.IsNullOrWhiteSpace(_search.Text))
        {
            SetNoResults();
            return;
        }

        _geoCodingData = await GeoCodingService.GetGeoCodingDataAsync(_search.Text);

        if (_geoCodingData == null || _geoCodingData.Count == 0)
        {
            SetNoResults();
            return;
        }

        _selectedGeoCodingLocation = _geoCodingData.FirstOrDefault()!;

        await LoadWeatherData();

        StateHasChanged();
    }

    private async Task LoadWeatherData()
    {
        try
        {
            _weatherData = await WeatherService.GetWeatherDataAsync(_selectedGeoCodingLocation!.Lat, _selectedGeoCodingLocation!.Lon);
            _isNoResults = false;
            _isLoading = false;
        }
        catch (Exception)
        {
            SetNoResults();
        }
    }

    private void SetNoResults()
    {
        _weatherData = null;
        _isNoResults = true;
        _isLoading = false;
    }
}
