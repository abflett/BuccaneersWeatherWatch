@page "/"
@inject WeatherService WeatherService
@inject GeoCodingService GeoCodingService
@using BuccaneersWeatherWatch.Web.Models;
@using BuccaneersWeatherWatch.Web.Services;
@using BuccaneersWeatherWatch.Web.Shared
@using BuccaneersWeatherWatch.Web.Utils;

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Weather forecast</MudText>
    </MudItem>

    <MudItem xs="12">
        <EditForm Model="@_search" OnSubmit="SearchForWeatherForcast">
            <MudGrid>
                <MudItem xs="10">
                    <MudTextField AutoFocus="true" Label="Search Location" HelperText="Example: Winnipeg" @bind-Value="_search.Text" For="(() => _search.Text)" />
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center">
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Search</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>

    @if (_geoCodingData != null && _geoCodingData.Count > 0 && !_isLoading && !_isNoResults)
    {
        <MudItem xs="12">
            <MudSelect T="GeoCodingLocationData" Label="Currently Selected" Immediate="true" Value="_selectedGeoCodingLocation" ValueChanged="ChangeSelected">
                @foreach (GeoCodingLocationData location in _geoCodingData)
                {
                    <MudSelectItem Value="@location" T="GeoCodingLocationData">@location.Display_name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    }

    @if (_isLoading)
    {
        <MudItem xs="12">
            <MudText>Loading results...</MudText>
        </MudItem>

    }

    @if (_isNoResults)
    {
        <MudItem xs="12">
            <MudText>Could not find any results with that location. Modify the search and try again.</MudText>
        </MudItem>

    }

    @if (_weatherData != null && !_isLoading)
    {
        <MudItem xs="12">
            <MudPaper Elevation="5" Class="pa-5">
                <MudGrid>
                    <MudItem xs="12">
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>WeatherData</MudText>
                    </MudItem>

                    @* ******************************************************************************************************************************************** *@

                    <MudItem xs="12">
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Longitude: @_weatherData.Longitude</MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Latitude: @_weatherData.Latitude</MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Timezone: @_weatherData.Timezone</MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Offset: @_weatherData.Offset</MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Elevation: @_weatherData.Elevation</MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Currently</MudText>
                    </MudItem>

                    @* ******************************************************************************************************************************************** *@

                    <MudItem xs="12">
                        <MudDivider />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Time: @_weatherData.Currently.Time</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Summary: @_weatherData.Currently.Summary</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Icon: @_weatherData.Currently.Icon</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>NearestStormDistance: @_weatherData.Currently.NearestStormDistance</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>NearestStormBearing: @_weatherData.Currently.NearestStormBearing</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>PrecipIntensity: @_weatherData.Currently.PrecipIntensity</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>PrecipProbability: @_weatherData.Currently.PrecipProbability</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>PrecipIntensityError: @_weatherData.Currently.PrecipIntensityError</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>PrecipType: @_weatherData.Currently.PrecipType</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Temperature: @_weatherData.Currently.Temperature</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>ApparentTemperature: @_weatherData.Currently.ApparentTemperature</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>DewPoint: @_weatherData.Currently.DewPoint</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Humidity: @_weatherData.Currently.Humidity</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Pressure: @_weatherData.Currently.Pressure</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>WindSpeed: @_weatherData.Currently.WindSpeed</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>WindGust: @_weatherData.Currently.WindGust</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>WindBearing: @_weatherData.Currently.WindBearing</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>CloudCover: @_weatherData.Currently.CloudCover</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>UvIndex: @_weatherData.Currently.UvIndex</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Visibility: @_weatherData.Currently.Visibility</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Ozone: @_weatherData.Currently.Ozone</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Time: @TimeConversion.UnixToLocalTime(_weatherData.Currently.Time)</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    }

</MudGrid>

@code {
    private Search _search = new Search();
    private WeatherData? _weatherData;
    private List<GeoCodingLocationData>? _geoCodingData;
    private GeoCodingLocationData? _selectedGeoCodingLocation;
    private bool _isNoResults = false;
    private bool _isLoading = false;

    private async Task ChangeSelected(GeoCodingLocationData newValue)
    {
        _isLoading = true;
        _selectedGeoCodingLocation = newValue;

        await LoadWeatherData();
    }

    public async Task SearchForWeatherForcast()
    {
        _isLoading = true;

        if (string.IsNullOrWhiteSpace(_search.Text))
        {
            SetNoResults();
            return;
        }

        _geoCodingData = await GeoCodingService.GetGeoCodingDataAsync(_search.Text);

        if (_geoCodingData == null || _geoCodingData.Count == 0)
        {
            SetNoResults();
            return;
        }

        _selectedGeoCodingLocation = _geoCodingData.FirstOrDefault()!;

        await LoadWeatherData();

        StateHasChanged();
    }

    private async Task LoadWeatherData()
    {
        try
        {
            _isNoResults = false;
            _weatherData = await WeatherService.GetWeatherDataAsync(_selectedGeoCodingLocation!.Lat, _selectedGeoCodingLocation!.Lon);
            _isLoading = false;
        }
        catch (Exception)
        {
            SetNoResults();
        }
    }

    private void SetNoResults()
    {
        _weatherData = null;
        _isNoResults = true;
        _isLoading = false;
    }
}
